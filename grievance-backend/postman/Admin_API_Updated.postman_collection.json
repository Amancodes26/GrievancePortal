{
  "info": {
    "name": "DSEU Grievance Portal - Admin API Collection",
    "description": "Complete Admin API collection for DSEU Grievance Portal\n\nFeatures:\n- Admin Authentication (Login/Set Password)\n- Admin Profile Management\n- Admin Dashboard Access\n- Database Migration Endpoint\n- Proper token management\n- Error handling validation\n\nVersion: 2.0.0\nUpdated: September 1, 2025",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_postman_id": "dseu-admin-api-2025"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{adminToken}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Set base URL if not already set",
          "if (!pm.globals.get('baseUrl')) {",
          "    pm.globals.set('baseUrl', 'http://localhost:5000/api/v1');",
          "}",
          "",
          "// Log request details for debugging",
          "console.log('Making request to:', pm.request.url.toString());"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test for response time",
          "pm.test('Response time is less than 5000ms', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});",
          "",
          "// Log response details",
          "console.log('Response status:', pm.response.status);",
          "console.log('Response time:', pm.response.responseTime + 'ms');"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:5000/api/v1",
      "type": "string"
    },
    {
      "key": "adminToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "adminEmail",
      "value": "admin@dseu.ac.in",
      "type": "string"
    },
    {
      "key": "adminPassword",
      "value": "admin123",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "üîß Database & System",
      "description": "Database and system management endpoints",
      "item": [
        {
          "name": "Database Migration Status",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/admin/migrate",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "migrate"]
            },
            "description": "Check database migration status and table existence"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Database migration status successful', function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "});",
                  "",
                  "pm.test('Response contains table information', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('tables');",
                  "    pm.expect(response.tables).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üîê Admin Authentication",
      "description": "Admin authentication and authorization endpoints",
      "item": [
        {
          "name": "Admin Login",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{adminEmail}}\",\n  \"password\": \"{{adminPassword}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/admin/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "auth", "login"]
            },
            "description": "Admin login with email and password. No OTP required for admin users."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Admin login successful', function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "});",
                  "",
                  "pm.test('Response contains success flag', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response contains token', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('token');",
                  "    pm.expect(response.token).to.be.a('string');",
                  "});",
                  "",
                  "pm.test('Response contains admin info', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('admin');",
                  "    pm.expect(response.admin).to.have.property('id');",
                  "    pm.expect(response.admin).to.have.property('email');",
                  "    pm.expect(response.admin).to.have.property('role');",
                  "});",
                  "",
                  "// Extract and save admin token",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.token) {",
                  "        pm.collectionVariables.set('adminToken', response.token);",
                  "        console.log('‚úÖ Admin token saved successfully');",
                  "        console.log('Admin ID:', response.admin.id);",
                  "        console.log('Admin Role:', response.admin.role);",
                  "    }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Set Admin Password",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{adminEmail}}\",\n  \"newPassword\": \"admin123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/admin/auth/set-password",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "auth", "set-password"]
            },
            "description": "Set or update admin password. Used for initial setup or password reset."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Password set successfully', function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "});",
                  "",
                  "pm.test('Response contains success flag', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response contains success message', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.message).to.include('Password updated successfully');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üë®‚Äçüíº Admin Management",
      "description": "Admin profile and dashboard management",
      "item": [
        {
          "name": "Get Admin Profile",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/admin/profile",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "profile"]
            },
            "description": "Get authenticated admin profile information including role, campus, and permissions"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Admin profile retrieved successfully', function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "});",
                  "",
                  "pm.test('Response contains success flag', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response contains admin data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('AdminId');",
                  "    pm.expect(response.data).to.have.property('Email');",
                  "    pm.expect(response.data).to.have.property('Role');",
                  "});",
                  "",
                  "pm.test('Admin has valid role', function () {",
                  "    const response = pm.response.json();",
                  "    const validRoles = ['SUPER_ADMIN', 'CAMPUS_ADMIN', 'DEPT_ADMIN'];",
                  "    pm.expect(validRoles).to.include(response.data.Role);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Admin Dashboard",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/admin/dashboard",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "dashboard"]
            },
            "description": "Get admin dashboard with statistics, recent activities, and system status"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Admin dashboard retrieved successfully', function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "});",
                  "",
                  "pm.test('Response contains success flag', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Dashboard contains admin info', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data).to.have.property('adminInfo');",
                  "    pm.expect(response.data.adminInfo).to.have.property('AdminId');",
                  "});",
                  "",
                  "pm.test('Dashboard contains statistics', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data).to.have.property('statistics');",
                  "    pm.expect(response.data.statistics).to.have.property('totalUsers');",
                  "    pm.expect(response.data.statistics).to.have.property('totalStudents');",
                  "});",
                  "",
                  "pm.test('Dashboard contains system status', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data).to.have.property('systemStatus');",
                  "    pm.expect(response.data.systemStatus).to.have.property('status');",
                  "    pm.expect(response.data.systemStatus.status).to.equal('operational');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üß™ Error Handling Tests",
      "description": "Test error scenarios and edge cases",
      "item": [
        {
          "name": "Invalid Admin Login",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"invalid@dseu.ac.in\",\n  \"password\": \"wrongpassword\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/admin/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "auth", "login"]
            },
            "description": "Test login with invalid credentials"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Invalid login returns 401', function () {",
                  "    pm.expect(pm.response.code).to.equal(401);",
                  "});",
                  "",
                  "pm.test('Response contains error message', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.false;",
                  "    pm.expect(response.message).to.include('Invalid email or password');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Unauthorized Profile Access",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer invalid_token"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/admin/profile",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "profile"]
            },
            "description": "Test profile access with invalid token"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Unauthorized access returns 401 or 403', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([401, 403]);",
                  "});",
                  "",
                  "pm.test('Response indicates authentication error', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.false;",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Missing Login Fields",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"admin@dseu.ac.in\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/admin/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "auth", "login"]
            },
            "description": "Test login with missing password field"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Missing fields returns 400', function () {",
                  "    pm.expect(pm.response.code).to.equal(400);",
                  "});",
                  "",
                  "pm.test('Response indicates missing fields', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.false;",
                  "    pm.expect(response.message).to.include('Email and password are required');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}
